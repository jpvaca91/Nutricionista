package nutricionista.Vistas;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import nutricionista.AccesoADatos.DietaData;
import nutricionista.AccesoADatos.HistorialData;
import nutricionista.AccesoADatos.PacienteData;
import nutricionista.Entidades.Dieta;
import nutricionista.Entidades.Historial;
import nutricionista.Entidades.Paciente;

public class FormularioHistorial extends javax.swing.JInternalFrame {

    private List<Paciente> listaP;
    private PacienteData pd;
    private DefaultTableModel modelo;
    private List<Historial> listaH;

    public FormularioHistorial() {
        initComponents();
        cargarComboPaciente();
        modelo = new DefaultTableModel();
        armarCabecera();

    }

    private void cargarComboPaciente() {
        pd = new PacienteData();
        listaP = pd.listarPacientes();
        for (Paciente item : listaP) {
            jcbPaciente.addItem(item);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtPesoInicial = new javax.swing.JTextField();
        jtPesoAct = new javax.swing.JTextField();
        jtPesoObjetivo = new javax.swing.JTextField();
        jbGuardar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jtFechaInicial = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jcbPaciente = new javax.swing.JComboBox<>();
        jdcFechaAct = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jtPesoAnt = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jtFechaAnt = new javax.swing.JTextField();
        jrbEstado = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtHistorial = new javax.swing.JTable();

        jLabel4.setText("jLabel4");

        setClosable(true);

        jLabel1.setText("SEGUIMIENTO POR PACIENTE");

        jLabel2.setText("Paciente");

        jLabel5.setText("Peso Inicial");

        jLabel6.setText("Peso Actual");

        jLabel7.setText("Peso Objetivo");

        jtPesoInicial.setEditable(false);
        jtPesoInicial.setBackground(new java.awt.Color(204, 204, 204));

        jtPesoObjetivo.setEditable(false);
        jtPesoObjetivo.setBackground(new java.awt.Color(204, 204, 204));

        jbGuardar.setText("Guardar ");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jLabel9.setText("Fecha Inicial");

        jtFechaInicial.setEditable(false);
        jtFechaInicial.setBackground(new java.awt.Color(204, 204, 204));

        jLabel10.setText("Fecha Actual");

        jcbPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbPacienteActionPerformed(evt);
            }
        });

        jLabel3.setText("Peso Anterior");

        jtPesoAnt.setEditable(false);
        jtPesoAnt.setBackground(new java.awt.Color(204, 204, 204));

        jLabel11.setText("Fecha Anterior");

        jtFechaAnt.setEditable(false);
        jtFechaAnt.setBackground(new java.awt.Color(204, 204, 204));

        jrbEstado.setText("Dieta Activa");

        jtHistorial.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jtHistorial);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel9)
                            .addComponent(jtFechaInicial)
                            .addComponent(jLabel5)
                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jtFechaAnt)
                            .addComponent(jLabel11)
                            .addComponent(jLabel3)
                            .addComponent(jtPesoAnt, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jtPesoAct, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(33, 33, 33)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jtPesoObjetivo)
                                    .addComponent(jLabel7)))
                            .addComponent(jLabel10)
                            .addComponent(jdcFechaAct, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jLabel2)
                                .addGap(31, 31, 31)
                                .addComponent(jcbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(138, 138, 138)
                                .addComponent(jLabel1)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jrbEstado)
                    .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtPesoAnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(jLabel9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtFechaInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtFechaAnt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jtPesoAct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jtPesoObjetivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addComponent(jLabel10)
                        .addGap(1, 1, 1)
                        .addComponent(jdcFechaAct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(jrbEstado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbGuardar)
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbPacienteActionPerformed

        limpiarCampos();
        actualizarDatos();
        actualizarTabla();
    }//GEN-LAST:event_jcbPacienteActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here:
        double pesoActual = 0;
        Paciente paciente = (Paciente) jcbPaciente.getSelectedItem();
        try {
            LocalDate fechaActual = jdcFechaAct.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            Boolean estado = true;
            if (jrbEstado.isSelected()) {
                estado = true;
            } else {
                String botones[] = {"SI", "NO"};
                int eleccion = JOptionPane.showOptionDialog(this, "Seguro desea dar por FINALIZADA la dieta de este paciente? ", "ALERTA!", 0, 0, null, botones, this);

                if (eleccion == JOptionPane.YES_OPTION) {
                    estado = false;
                } else {
                    JOptionPane.showMessageDialog(null, "Se cancelan las modificaciones");
                    return;
                }
            }

            pesoActual = Double.parseDouble(jtPesoAct.getText());
            Historial historial = new Historial();
            historial.setPaciente(paciente);
            historial.setFechaRegistro(fechaActual);
            historial.setEstado(estado);
            historial.setPeso(pesoActual);

            HistorialData hd = new HistorialData();
            hd.guardarHistorial(historial);

            paciente.setEstado(estado);
            PacienteData pd = new PacienteData();
            pd.actualizarEstado(paciente);

            Dieta dieta = new Dieta();

            dieta.setPesoActual(Double.parseDouble(jtPesoAct.getText()));
            dieta.setFechaActual(jdcFechaAct.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
            dieta.setPaciente(paciente);

            DietaData dd = new DietaData();
            dd.actualizarHistorial(dieta);

            limpiarCampos();
            actualizarDatos();
            cargarComboPaciente();
            //actualizarTabla();

        } catch (NumberFormatException nf) {
            JOptionPane.showMessageDialog(null, "Debe introducir un peso correcto");
        } catch (NullPointerException np) {
            JOptionPane.showMessageDialog(null, "No debe haber campos vacios");
        }


    }//GEN-LAST:event_jbGuardarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JComboBox<Paciente> jcbPaciente;
    private com.toedter.calendar.JDateChooser jdcFechaAct;
    private javax.swing.JCheckBox jrbEstado;
    private javax.swing.JTextField jtFechaAnt;
    private javax.swing.JTextField jtFechaInicial;
    private javax.swing.JTable jtHistorial;
    private javax.swing.JTextField jtPesoAct;
    private javax.swing.JTextField jtPesoAnt;
    private javax.swing.JTextField jtPesoInicial;
    private javax.swing.JTextField jtPesoObjetivo;
    // End of variables declaration//GEN-END:variables

    public void limpiarCampos() {
        jtPesoInicial.setText("");
        jtFechaInicial.setText("");
        jtPesoAnt.setText("");
        jtPesoAct.setText("");
        jtPesoObjetivo.setText("");
        jtFechaAnt.setText("");
        jdcFechaAct.setDate(null);

    }

    public void actualizarDatos() {

        Paciente paciente = (Paciente) jcbPaciente.getSelectedItem();
        DietaData dd = new DietaData();
        Dieta dieta = new Dieta();
        Dieta dieta2 = new Dieta();
        limpiarCampos();
        try {

            dieta = dd.buscarDietaCompleta(paciente);
            jtPesoInicial.setText(dieta.getPesoInicial() + "");
            jtFechaInicial.setText(dieta.getFechaInicial() + "");
            jtPesoObjetivo.setText(dieta.getPesoFinal() + "");
            jtPesoAnt.setText(dieta.getPesoActual() + "");
            jtFechaAnt.setText(dieta.getFechaActual() + "");

        } catch (NullPointerException np) {
            dieta2 = dd.buscarDieta(paciente);
            jtPesoInicial.setText(dieta2.getPesoInicial() + "");
            jtFechaInicial.setText(dieta2.getFechaInicial() + "");
            jtPesoObjetivo.setText(dieta2.getPesoFinal() + "");
            JOptionPane.showMessageDialog(null, "Es el primer control del paciente seleccionado");

        }
    }

    public void actualizarTabla() {

        //borrarTabla();
        HistorialData hd = new HistorialData();

        try {
            listaH = hd.buscarHistorial((Paciente) jcbPaciente.getSelectedItem());

            for (Historial it : listaH) {
                Object[] fila = new Object[]{it.getPeso(), it.getFechaRegistro()};
                modelo.addRow(fila);

            }
            jtHistorial.setModel(modelo);

        } catch (NullPointerException np) {
            JOptionPane.showMessageDialog(null, "Este paciente no tiene datos historicos");
        }

    }

    public void borrarTabla() {

        int cantfilas = jtHistorial.getRowCount();

        if (cantfilas >= 1) {
            modelo.setNumRows(0);
            jtHistorial.setModel(modelo);
        }

    }

    private void armarCabecera() {

        ArrayList<Object> filaCabecera = new ArrayList<>();
        filaCabecera.add("Historial de peso");
        filaCabecera.add("Fecha");

        for (Object it : filaCabecera) {
            modelo.addColumn(it);
        }
        jtHistorial.setModel(modelo);
    }
}
